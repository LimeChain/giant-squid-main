# This is an auto-generated file used by the graphiQL explorer to define the tables and relationships between them.
# This file will be auto-populated based on the pallets used in src/chain/{chainName}/main.ts
# See generateSchema.ts for more information on how this file is generated.

type QueryLogs @entity {
  id: ID!
  query: String!
  timestamp: DateTime!
  location: String
  chainName: String!
}

enum NFTTokenStandard {
  ERC721
  ERC1155
}

type NFTHolder @entity {
  id: ID!
  account: Account! @index
  nftCount: Int!
  collection: NFTCollection! @index
}

type NFTCollection @entity {
  id: ID!
  metadataUri: String
  owner: Account @index
  holders: [NFTHolder!] @derivedFrom(field: "collection")
  tokens: [NFTToken!] @derivedFrom(field: "collection")
  transfers: [NFTTransfer!] @derivedFrom(field: "collection")
}

type NFTTransfer @entity {
  id: ID!
  timestamp: DateTime!
  blockNumber: Int! @index
  extrinsicHash: String! @index
  from: Account! @index
  to: Account! @index
  tokens: [NFTTokenTransfer!]! @derivedFrom(field: "transfer")
  collection: NFTCollection! @index
}

type NFTToken @entity {
  id: ID!
  tokenId: String! @index
  collection: NFTCollection! @index
  owner: Account! @index
  metadataUri: String
  standard: NFTTokenStandard
  transfers: [NFTTokenTransfer!]! @derivedFrom(field: "token")
  attributes: [NFTAttribute] @derivedFrom(field: "token")
}

type NFTAttribute @entity {
  id: ID!
  key: String!
  value: String!
  token: NFTToken! @index
}

# Helper entity to allow for transfers derivation if NFTToken entity
type NFTTokenTransfer @entity {
  id: ID!
  token: NFTToken! @index
  transfer: NFTTransfer! @index
}

type Account @entity {
  id: ID!
  publicKey: ID! @index
  nftTokens: [NFTToken!] @derivedFrom(field: "owner")
}
