type Account @entity {
    id: ID!
    publicKey: ID! @index
    transfers: [AccountTransfer!] @derivedFrom(field: "account")
    rewards: [StakingReward!] @derivedFrom(field: "account")
    extrinsics: [SignedExtrinsic!] @derivedFrom(field: "account")
}

enum TransferDirection {
    From
    To
}

interface Action @query {
    id: ID!
    account: Account!
    timestamp: DateTime!
    blockNumber: Int!
    extrinsicHash: String 
}

# entity for linking account and transfer
type AccountTransfer implements Action @entity {
    id: ID!
    transferEntity: NativeTransfer
    account: Account!
    direction: TransferDirection
    timestamp: DateTime!
    blockNumber: Int! @index
    extrinsicHash: String @index
}

type NativeTransfer @entity {
    id: ID!
    blockNumber: Int! @index
    timestamp: DateTime! @index
    extrinsicHash: String @index
    from: Account!
    to: Account!
    amount: BigInt! @index
    success: Boolean!
}

type StakingReward implements Action @entity {
    id: ID!
    timestamp: DateTime!
    blockNumber: Int! @index
    extrinsicHash: String @index
    account: Account!
    amount: BigInt!
    era: Int
    validatorId: ID
}

type SignedExtrinsic implements Action @entity {
    id: ID!
    timestamp: DateTime!
    blockNumber: Int! @index
    extrinsicHash: String @index
    callName: String @index
    fee: BigInt!
    account: Account!
}
