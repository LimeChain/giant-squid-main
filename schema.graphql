type Account @entity {
  id: ID!
  publicKey: ID! @index
  transfers: [Transfer!] @derivedFrom(field: "account")
  rewards: [StakingReward!] @derivedFrom(field: "account")
  identity: Identity @derivedFrom(field: "account")
  staker: Staker @derivedFrom(field: "stash")
  sub: IdentitySub @derivedFrom(field: "account")
}

enum TransferDirection {
  From
  To
}

# entity for linking account and transfer
type Transfer @entity {
  id: ID!
  transfer: NativeTransfer
  account: Account!
  direction: TransferDirection
}

type NativeTransfer @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  extrinsicHash: String @index
  from: Account!
  to: Account!
  amount: BigInt! @index
  success: Boolean!
}

type IdentityAdditionalField {
  name: String
  value: String
}

enum Judgement {
  Unknown
  FeePaid
  Reasonable
  KnownGood
  OutOfDate
  LowQuality
  Erroneous
}

type Identity @entity {
  id: ID!
  account: Account! @unique
  judgement: Judgement!
  subs: [IdentitySub!] @derivedFrom(field: "super")
  additional: [IdentityAdditionalField!]
  display: String
  legal: String
  web: String
  riot: String
  email: String
  pgpFingerprint: String
  image: String
  twitter: String
  isKilled: Boolean!
}

type IdentitySub @entity {
  id: ID!
  super: Identity
  account: Account! @unique
  name: String
}

enum StakingRole {
  Validator
  Nominator
  Idle
  Unknown
}

type StakingReward @entity {
  id: ID!
  timestamp: DateTime!
  blockNumber: Int! @index
  extrinsicHash: String @index
  account: Account!
  amount: BigInt!
  staker: Staker!
  era: Int
  validatorId: ID
}

type StakingBond @entity {
  id: ID!
  timestamp: DateTime!
  blockNumber: Int! @index
  extrinsicHash: String @index
  amount: BigInt!
  account: Account!
  staker: Staker!
}

type StakingUnlockChunk @entity {
  id: ID!
  timestamp: DateTime!
  blockNumber: Int! @index
  staker: Staker!
  lockedUntilEra: Int!
  amount: BigInt!
  withdrawn: Boolean!
}

type StakingSlash @entity {
  id: ID!
  timestamp: DateTime!
  blockNumber: Int! @index
  extrinsicHash: String @index
  amount: BigInt!
  account: Account!
  staker: Staker!
}

type Staker @entity {
  id: ID! #stash Id
  stash: Account! @unique

  role: StakingRole!

  totalBonded: BigInt!
  totalUnbonded: BigInt!
  totalWithdrawn: BigInt!
  totalSlashed: BigInt!

  unlockings: [StakingUnlockChunk!] @derivedFrom(field: "staker")
  rewards: [StakingReward!] @derivedFrom(field: "staker")
  slashes: [StakingSlash!] @derivedFrom(field: "staker")
  bonds: [StakingBond!] @derivedFrom(field: "staker")
}
